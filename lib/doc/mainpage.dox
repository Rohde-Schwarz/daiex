/**
 * \tableofcontents
 *
 *      Rohde & Schwarz GmbH & Co. KG <br>
 *      Web: <a href="www.rohde-schwarz.com">www.rohde-schwarz.com</a>
 *
 */
 
 /*!
@mainpage LibDataImportExport Manual

Version: @b 1.0.34

Introduction
============

The MOSAIK module LibDataImportExport is a cross-platform c++ library that provides functions to import and export numeric I/Q data to or from various file formats.

Two groups of file format are considered: 
- special binary formats that contain I/Q data, as used by various instruments, for instance iq-tar.
- generic file formats that can be used to exchange raw data with standard PC tools, such as Microsoft Office or Matlab.

The library provides standardized read and write functions that encapsulate all file operations. 
The following file formats are supported:

| File format	  | File extension	| Comment |
|:--------------|:----------------|:--------|
| iq-tar	      | .iq.tar         | An iq-tar file contains I/Q data in binary format together with meta information that describes the nature and the source of data, e.g. sample rate. The objective of the iq-tar file format is to separate I/Q data from the meta information while still having both in one file. In addition, the file format allows a preview of the I/Q data in a web browser and inclusion of user-specific data. For details see class @ref rohdeschwarz.mosaik.dataimportexport.IqTar "IqTar". Note that each channel is written to a temporary file and the final .iq.tar file is only generated when calling close(). Thus, the close-method might be a long-running operation, as all temporary files need to be merged to the final tar file. For best read performance set @ref rohdeschwarz.mosaik.dataimportexport.Settings.setBufferSize "setBufferSize" to the size usually read with one readArray or readChannel call. Note that whenever new I/Q data is added, an I/Q preview is calculated. Dependent on the number of I/Q values added, this might be a time consuming operation. If the number of I/Q values is well-known, temp-files can be disabled using "disableTempFile()" |
| IQW (IIIQQQ)	| .iqw	          | A file that contains Float32 data in a binary format ( first all I values are stored, followed by all Q values ). The file does not contain any additional header information. Note that I and Q data are first buffered to temporary files and are merged when calling close(). Prefer IQW-format with data order IQIQIQ. The data order has to be changed before readOpen or writeOpen is called. |
| IQW (IQIQIQ)	| .iqw	          | A file that contains Float32 data in a binary format ( values are stored in interleaved format, starting with the first I value ). The file does not contain any additional header information. The data order has to be changed before readOpen or writeOpen is called. |
| WV (IQIQIQ) 	| .wv	          | A file that contains INT16 data in a binary format ( values are stored in interleaved format, starting with the first I value ). This format is used in signal generators.|
| IQX (IQIQIQ)	| .iqx	          | A file that contains INT16 or INT12 data in a binary format ( values are stored in interleaved format, starting with the first I value ). This format is used in device IQW.|
| AID (IQIQIQ)	| .iqx	          | A file that contains I/Q data in a binary format ( values are stored in interleaved format, starting with the first I value ). This format is used in AMMOS project.|
| CSV 					| .csv	          | A file containing I/Q data in comma-separated values format (CSV). The comma-separator used can either be a semicolon or a comma, depending on the decimal separator used to save floating-point values (either dot or comma). Additional meta data can be saved. For details see class @ref rohdeschwarz.mosaik.dataimportexport.IqCsv "Csv".|
| Matlab v4			| .mat	          | A file containing I/Q data in matlab file format v4. Channel related information is stored in matlab variables with names starting with 'ChX_'. 'X' represents the number of the channel with a lower bound of 1, e.g. variable Ch1_ChannelName contains the name of the first channel. The corresponding data is contained in ChX_Data. Optional user data can be saved to variables named UserDataX, where 'X' starts at 0. Variable UserData_Count contains the number of UserData variables. For compatibility reasons user data needs to be saved as a 2xN char array, where the first row contains the key of the user data and the second row the actual value. Both rows must have the same column count and are therefore right-padded with white spaces. Variables can be written in arbitary order to the *.mat files. For details see @ref rohdeschwarz.mosaik.dataimportexport.IqMatlab "IqMatlab". @n Limitations: @n In general, the file format is limited to a maximum of 2GB. A maximum of 100000000 can be stored in a single variable. Consequently, complex data can contain up to 50000000 samples. Note that all data is loaded into RAM before being written to the .mat file. Make sure to provide sufficient free memory. | 
| Matlab v7.3		| .mat	          | A file containing I/Q data in matlab file format v7.3. Supportes the same functionality as matlab v4 file format, but requires the Matlab Compiler Runtime (MCR) to be installed on the system. The installation needs to be registered in the global PATH environment variable. The machine type of the installation needs to match the machine type of DataImportExport, e.g. 32bit DataImportExport cannot be linked against 64bit MCR. For details see @ref rohdeschwarz.mosaik.dataimportexport.IqMatlab "IQMatlab". @n Limitations: @n When calling FinishPartialIQ, all data needs to be loaded into memory. @n The matlab v7.3. file format requires the Matlab Compiler Runtime (MCR) to be installed on the system and registered in the PATH environment variable. Download an MCR version >= 7.2 from http://www.mathworks.de/products/compiler/mcr/. Note that all data is loaded into RAM before being written to the .mat file. Make sure to provide sufficient free memory. |


@n

Whenever possible (currently all supported file formats except IQW) the following meta data will be stored when writing a file using @c IDataImportExport.

| Key	              | Description                                                                           |
|:------------------|:--------------------------------------------------------------------------------------|
| Application Name	| Name of the application or instrument that created the file. (optional)               | 
| Comment           |	A text that further describes the contents of the file. (optional)            	      | 
| DateTime	        | Date and time of the creation of the file. Formated as "yyyy-MM-ddTHH:mm:ss". If not set explicitly, the current date is set before file is saved. |
| Samples	          | Number of samples of the stored data. One sample can be a complex number represented as a pair of I and Q values or as a pair of magnitude and phase values or a real number represented as a single real value	          | 
| Clock             | The clock frequency in Hz, i.e. the sample rate of the I/Q data. A signal generator typically outputs the I/Q data at a rate that equals the clock frequency. If the I/Q data was captured with a signal analyzer, the signal analyzer used the clock frequency as the sample rate. |
| CenterFrequency   | Center frequency of the modulated waveform in Hz.|
| Format            | Specifies how the binary data is saved. Every sample must be in the same format. The format can be one of the following: complex, real or polar. |
| DataType          | Specifies the binary format used for saving the samples. 32 or 64 bit floating point data (IEEE 754). |
| ChannelNames      | List of strings containing the names for each data channel stored in the file. Default value is "Channel1" etc.. The array names returned by IDataImportExport.OpenFile are built from those channel names by appending "_I" and "_Q". |

In addition optional meta data can be added as key - value pairs of type string. The iq.tar file format accepts XML as value-string. If the value-string represents a valid
XML, the value is written unmodified to file. If the value-string does not represent a valid-string, special characters are escaped to match the XML convention.

&nbsp;

-------------------------------------------------------------------------------

.NET Wrapper
===========

The LibDataImportExport library provides a .NET Wrapper for the native c++ dll, in order to
make the functionallity of LibDataImportExport usable in managed projects. An installation of 
the .NET Framework is required on the target machine. For details on how to use the wrapper classes,
please refer to the documentation of the @ref wrapper_page.

-------------------------------------------------------------------------------

Setup
=====

In this section we describe the usage of the library in an c++ project. All preconditions for the usage are also listed at this point.

Preconditions
-------------

The LibDataImportExport library is a cross-platform c++ implementation. Pre-build binaries are available for 
Studio 2017. Make sure to install the corresponding Microsoft Runtime. 

Linux binaries have currently been tested with GCC 4.9.* and 5.3.*. 

The .NET wrapper requires at least .NET Framework 4.0.

Visual Studio
-------------

To set up your application for the usage of LibDataImportExport, apply the following project settings to the solution:

- Tab C++/General - <i>Additional Include Directories</i>: Add path to Mosaik.LibDataImportExport/include
- Linker/General - <i>Additional Library Directories</i>: Add path to Mosaik.LibDataImportExport/lib/
- Linker/Input - <i>Additional Dependencies</i>: Add "daiex.lib"
- place daiex.dll next to your application or add it to a folder that is included in the application search path.

To use the LibDataImportExport API, include the main header file and add the following namespace directive:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include "dataimportexport.h"
using namespace rohdeschwarz::mosaik::dataimportexport;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Summary
-------
- Install Visual Studio 2017
- clone LibDataImportExport 
- Add include and library directories as well as linked dependency to your project settings
- Include main header file - dataimportexport.h - 
- ensure that your application will find daiex.dll

&nbsp;

-------------------------------------------------------------------------------

Usage
=====

This section describes the public interfaces of @c daiex.dll.
The main interface to perform read and write operations is @ref rohdeschwarz.mosaik.dataimportexport.IDataImportExport "IDataImportExport", 
which is implemented by various classes like @ref rohdeschwarz.mosaik.dataimportexport.IqTar "IqTar" to support the different file formats.

![Diagramm of main interfaces and classes](classrohdeschwarz_1_1mosaik_1_1dataimportexport_1_1IDataImportExport__inherit__graph.png)

In order to read data from a file, you need to create an object that corresponds to the required
file format, for example IqTar.

The instantiation can either be done explicitly, i.e.f
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IqTar readFile("c:/test.iq.tar");
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
or by using a factory method provided by the auxillary class @ref rohdeschwarz.mosaik.dataimportexport.FileTypeService "FileTypeService" to access the general interface
IDataImportExport.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
IDataImportExport* readfile = FileTypeService.Create("c:/test.iq.tar", FileType.Iqtar);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

Use UTF-8 encoding for all strings passed to classes of LibDataImportExport.

@ref rohdeschwarz.mosaik.dataimportexport.FileTypeService "FileTypeService" can also be used to query the available file formats (@ref rohdeschwarz.mosaik.dataimportexport.FileTypeService.getPossibleFileFormats "getPossibleFileFormats"),
the file extensions of a specific format (@ref rohdeschwarz.mosaik.dataimportexport.FileTypeService.getFileExtension "getFileExtension") and a filter string 
that can be used in file dialogs (@ref rohdeschwarz.mosaik.dataimportexport.FileTypeService.getFileFilter "getFileFilter").

To read data from the file, the file must be opened to scan the contained data. During this process only meta data will be read, but no actual I/Q values.
Most methods will return an error code. Evaluate this code to be ErrorCode.Success for successful operation. Otherwise an error message can be obtained using
@ref rohdeschwarz.mosaik.dataimportexport.ErrorCodes.getErrorText "getErrorText" for the specified error code.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// open file and read array names of I/Q data.
vector<string> arrayNames;
int returnCode = readFile.readOpen(arrayNames);
if (returnCode != ErrorCodes.Success)
{
  // error handling
}

// Opening the file was successful. 
// Read channel information and meta data.
vector<ChannelInfo> channelInfos;
map<string, string> metadata;
returnCode = readFile.getMetadata(channelInfos, metadata);
if (returnCode != ErrorCodes.Success)
{
   // error handling
}

cout << "Number of channels: " << channelInfos.size() << endl;
for (size_t i = 0; i < channelInfos.size(); ++i)
{
  cout << "Information for channel named " '" << channelInfos[i].getChannelName()  << "' ": clock rate: " << channelInfos[i].getClockRate() << ", center frequency: " << channelInfos[i].getFrequency() << endl;
}

// print all meta data found in file
for (const auto& kvp : metadata)
{
  cout << "Key: " << kvp.first << " has value: " << kvp.second << endl;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

If you want to change parameters that affect the read or write behaviour of the data format, changes have to be applied
<b>before</b> calling readOpen() or writeOpen(). For instance, the data order of an IQW file to be read can be changed using
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Iqw readFile(filename);
returnCode = readFile.setDataOrder(IqDataOrder::IQIQIQ);
returnCode = readFile.readOpen(arrayNames);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

In a similar fasion, the preview of I/Q data for the IqTar file format can be disabled using:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
IqTar readFile(filename);
returnCode = readFile.setPreviewEnabled(false);
returnCode = readFile.writeOpen(...);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

The actual I/Q data arrays can be accessed using the corresponding array names returned by @c IDataImportExport.readOpen.
Each data array can be read with single or double precision regardless of the precision used to save the data to file. The read
methods will perform the conversion internally. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
for (size_t arrayIdx = 0; arrayIdx < arrayNames.size(); ++arrayIdx)
{
  // get the number of values stored in the array
  int64_t size = readFile.getArraySize(arrayNames[arrayIdx]);

  // Read data into vector.
  // For better read performance, resize the vector to the number of elements you want to read.
  // Otherwise, memory allocation will be performed by the read operation.
  vector<float> floatVector(size);

  // read data
  returnCode = readFile.readArray(arrayNames[arrayIdx], floatVector, size);

  // If you would like to read only a certain selection of the data array, define an additional offset.
  // The offset defines the number of values that are skipped before the read operation starts. 
  size_t offset = 10;
  size_t nofValuesToRead = 100;
  returnCode = readFile.readArray(arrayNames[arrayIdx], floatVector, nofValuesToRead, offset);
  
  // If you prefer to read data to an array instead to a vector, you can do so.
  // Memory has to be preallocated.
  double doubleArray[100];
  returnCode = readFile.readArray(arrayNames[arrayIdx], &doubleArray, 100);
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 

Data can not only be read array-wise using the stored array names (e.g. "Channel1_I", "Channel1_Q"), 
but also channel-wise (e.g. "Channel1"). Therefor use
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  returnCode = readFile.readChannel("Channel1", floatVector, size);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
and
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  returnCode = readFile.readChannel("Channel1", &doubleArray, size);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
respectively.

The read-offset specified in @c readChannel refers to the number of I/Q pairs, e.g. an offset of 4
skips the first 2 I/Q pairs.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  returnCode = readFile.readChannel("Channel1", &doubleArray, size, offset);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you are done with your read operations, close the file by calling
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  returnCode = readFile.close();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If a file format does not match the specification, an error code will be returned when readOpen() is called.
In case of the CSV and Matlab file format, data fields can still be read using index-based access, cf.
@ref rohdeschwarz.mosaik.dataimportexport.ICsvSelector "ICsvSelector" and @ref rohdeschwarz.mosaik.dataimportexport.IArraySelector "IArraySelector".

__Attention:__ When reading large amounts of data incrementally reuse the allocated memory in order
to avoid heap fragmentation. Array length is returned as int64_t as data arrays in a file can be very large,
but the number of values that can be read with one function call is restricted to size_t.


Saving data to file is realized in a similar fashion than reading data. Therefore use methods
@c writeOpen, @c writeArray or @c writeChannel and @c close.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vector<vector<float>> writeVector;
// ... fill data ...
// writeVector contains all data vectors, i.g. vector<vector containing Channel1_I values, vector containing Channel1_Q values>
// for a 1 Channel complex data array. For two complex channels, writeVector must contain 4 data vectors, etc.

// create channel information
double centerFreq = 15.5;
double clock = 1000.2;
vector<ChannelInfo> channelInfos;
channelInfos.push_back(ChannelInfo("Channel1", clock, centerFreq));

// create object of desired file format
IqTar writeFile("c:/myfile.iq.tar");

// open file for write operations: define the I/Q data format used and the number of arrays to be written.
size_t nofArraysToWrite = writeVector.size(); 
returnCode = writeFile.writeOpen(IqDataFormat::Complex, nofArraysToWrite, "My R/S test application", "My comment for test application", channelInfo);

// you can add optional meta data as key-value pairs to the file, if supported by the file format (currently all formats but IQW)
map<string, string> metadata;
metadata.insert(make_pair("Key", "Value"));
metadata.insert(make_pair("Key2", "Value2"));
returnCode = writeFile.writeOpen(IqDataFormat::Complex, nofArraysToWrite, "My R/S test application", "My comment for test application", channelInfo, &metadata);


for (size_t i = 0; i < 4; ++i)
{
  // fill writeVector with new data...
  // and write data to file
  returnCode = writeFile.appendArrays(writeVector);
}

// When all data has been added, call close
returnCode = writeFile.close();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Analogous to @c readArray, data can also be added using arrays instead of vectors.
Therefore, provide a vector containing pointers to the actual data arrays and an additional
vector that contains the lengths of the data arrays.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vector<float*> writeArray;
// ... add pointers to data arrays to writeArray ...

vector<size_t> arrayLengths;
arrayLength.push_back("length of array1");
arrayLength.push_back("length of array2");

// write data
writeFile.appendArrays(writeArray, arrayLengths);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Channels are written in a similar fashion:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// note that nofArraysToWrite is 1 instead of 2, as only 1 array containing interleaved I/Q data of the channel
// is passed instead of two arrays of separate I and Q values.
size_t nofArraysToWrite = 1;
returnCode = writeFile.writeOpen(IqDataForm::Complex, nofArraysToWrite, "My R/S test application", "My comment for test application", channelInfo);

vector<vector<float>> writeChannelVector;
// ...fill data ...
// writeChannelVector contains the data data of each channel per vector element, e.g. vector<Channel1 values, Channel2 values, etc.>.
// Complex-valued channels must contain I/Q data in interleaved format per channel, i.e. IQIQIQ.

vector<size_t> channelLengths;
channelLengths.push_back("nof values of channel");

returnCode = writeFile.appendChannels(writeChannelVector, channelLengths);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

__Performance:__ Many file formats make use of temporary files while adding new I/Q data. The final file is written when the close() operation
is called. The default location used to write temporary files is the system's temp-directory, which is usually located on the primary hard drive.
To obtain the best write performance, make sure to store temporary files on the same hard-drive than your final file is going to be stored. To change
the temporary file location, call @c setTempDir on the respective file object.


-------------------------------------------------------------------------------

Release Notes
=============

See @ref ReleaseNotes_page

-------------------------------------------------------------------------------


*/
